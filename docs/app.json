[{"name":"app.R","content":"webr::install('plotly')\nwebr::install('DT')\nlibrary('shiny')\nlibrary('plotly')\nlibrary('DT')\n\nui <- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\"),\n      DTOutput(\"table1\"),\n      plotlyOutput('fig')\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    x    <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x, breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\")\n    })\n  output$table1 <- renderDT({datatable(mtcars)})\n  output$fig <- renderPlotly({\n    Animals <- c(\"giraffes\", \"orangutans\", \"monkeys\")\n    SF_Zoo <- c(20, 14, 23)\n    LA_Zoo <- c(12, 18, 29)\n    data <- data.frame(Animals, SF_Zoo, LA_Zoo)\n    fig <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo')\n    fig <- fig %>% add_trace(y = ~LA_Zoo, name = 'LA Zoo')\n    fig <- fig %>% layout(yaxis = list(title = 'Count'), barmode = 'group')\n    fig\n  })\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Hello Shiny!\nAuthor: RStudio, Inc.\nAuthorUrl: http://www.rstudio.com/\nLicense: MIT\nDisplayMode: Showcase\nTags: getting-started\nType: Shiny\n","type":"text"},{"name":"Readme.md","content":"This small Shiny application demonstrates Shiny's automatic UI updates. \n\nMove the *Number of bins* slider and notice how the `renderPlot` expression is automatically re-evaluated when its dependant, `input$bins`, changes, causing a histogram with a new number of bins to be rendered.\n","type":"text"}]
